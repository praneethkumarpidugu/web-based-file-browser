// Generated by CoffeeScript 1.6.3
(function() {
  var StackVal,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  StackVal = (function() {
    function StackVal() {
      this.defined = __bind(this.defined, this);
      this.get = __bind(this.get, this);
      this.attach = __bind(this.attach, this);
      this._stack = [];
    }

    /*
    Combinator that returns a function with an attached stack value.
    Whenever you execute this function  the generator function will be executed
    and the resulting value will will be accessible to any downstack function.
    */


    StackVal.prototype.attach = function(f, generator) {
      var sv;
      if (typeof f !== 'function') {
        throw new Error('function argument required');
      }
      sv = this;
      return function() {
        try {
          sv._stack.push(generator());
          return f.apply(this, arguments);
        } finally {
          sv._stack.pop();
        }
      };
    };

    /*
    Gets a stackval that was attached to an upstack function
    will throw an error if there is no upstack function with a value
    attached
    */


    StackVal.prototype.get = function() {
      if (this.defined()) {
        return this._stack[this._stack.length - 1];
      } else {
        throw new Error('No stackval found upstack');
      }
    };

    /*
    true if there is a value attached upstack
    */


    StackVal.prototype.defined = function() {
      return this._stack.length !== 0;
    };

    return StackVal;

  })();

  module.exports = function() {
    var main, s;
    s = new StackVal();
    main = function() {
      var a;
      a = arguments;
      if (a.length === 2) {
        return s.attach(a[0], a[1]);
      } else {
        return s.get();
      }
    };
    main.attach = function() {
      return s.attach.apply(s, arguments);
    };
    main.get = function() {
      return s.get.apply(s, arguments);
    };
    main.defined = function() {
      return s.defined.apply(s, arguments);
    };
    return main;
  };

}).call(this);
